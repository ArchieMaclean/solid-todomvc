!function(n){var g={};function I(t){if(g[t])return g[t].exports;var e=g[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,I),e.l=!0,e.exports}I.m=n,I.c=g,I.d=function(n,g,t){I.o(n,g)||Object.defineProperty(n,g,{enumerable:!0,get:t})},I.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},I.t=function(n,g){if(1&g&&(n=I(n)),8&g)return n;if(4&g&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(I.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&g&&"string"!=typeof n)for(var e in n)I.d(t,e,function(g){return n[g]}.bind(null,e));return t},I.n=function(n){var g=n&&n.__esModule?function(){return n.default}:function(){return n};return I.d(g,"a",g),g},I.o=function(n,g){return Object.prototype.hasOwnProperty.call(n,g)},I.p="/",I(I.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/s-js/dist/es/S.js\n// Public interface\nvar S_S = function S(fn, value) {\n  var node = new ComputationNode(fn, value);\n  return function computation() {\n    return node.current();\n  };\n}; // compatibility with commonjs systems that expect default export to be at require('s.js').default rather than just require('s-js')\n\n\nObject.defineProperty(S_S, 'default', {\n  value: S_S\n});\n/* harmony default export */ var es_S = (S_S);\n\nS_S.root = function root(fn) {\n  var owner = Owner,\n      root = fn.length === 0 ? UNOWNED : new ComputationNode(null, null),\n      result = undefined,\n      disposer = fn.length === 0 ? null : function _dispose() {\n    if (RunningClock !== null) {\n      RootClock.disposes.add(root);\n    } else {\n      dispose(root);\n    }\n  };\n  Owner = root;\n\n  if (RunningClock === null) {\n    result = topLevelRoot(fn, disposer, owner);\n  } else {\n    result = disposer === null ? fn() : fn(disposer);\n    Owner = owner;\n  }\n\n  return result;\n};\n\nfunction topLevelRoot(fn, disposer, owner) {\n  try {\n    return disposer === null ? fn() : fn(disposer);\n  } finally {\n    Owner = owner;\n  }\n}\n\nS_S.on = function on(ev, fn, seed, onchanges) {\n  if (Array.isArray(ev)) ev = callAll(ev);\n  onchanges = !!onchanges;\n  return S_S(on, seed);\n\n  function on(value) {\n    var running = RunningNode;\n    ev();\n    if (onchanges) onchanges = false;else {\n      RunningNode = null;\n      value = fn(value);\n      RunningNode = running;\n    }\n    return value;\n  }\n};\n\nfunction callAll(ss) {\n  return function all() {\n    for (var i = 0; i < ss.length; i++) ss[i]();\n  };\n}\n\nS_S.effect = function effect(fn, value) {\n  new ComputationNode(fn, value);\n};\n\nS_S.data = function data(value) {\n  var node = new DataNode(value);\n  return function data(value) {\n    if (arguments.length === 0) {\n      return node.current();\n    } else {\n      return node.next(value);\n    }\n  };\n};\n\nS_S.value = function value(current, eq) {\n  var data = S_S.data(current),\n      age = -1;\n  return function value(update) {\n    if (arguments.length === 0) {\n      return data();\n    } else {\n      var same = eq ? eq(current, update) : current === update;\n\n      if (!same) {\n        var time = RootClock.time;\n        if (age === time) throw new Error(\"conflicting values: \" + update + \" is not the same as \" + current);\n        age = time;\n        current = update;\n        data(update);\n      }\n\n      return update;\n    }\n  };\n};\n\nS_S.freeze = function freeze(fn) {\n  var result = undefined;\n\n  if (RunningClock !== null) {\n    result = fn();\n  } else {\n    RunningClock = RootClock;\n    RunningClock.changes.reset();\n\n    try {\n      result = fn();\n      S_event();\n    } finally {\n      RunningClock = null;\n    }\n  }\n\n  return result;\n};\n\nS_S.sample = function sample(fn) {\n  var result,\n      running = RunningNode;\n\n  if (running !== null) {\n    RunningNode = null;\n    result = fn();\n    RunningNode = running;\n  } else {\n    result = fn();\n  }\n\n  return result;\n};\n\nS_S.cleanup = function cleanup(fn) {\n  if (Owner !== null) {\n    if (Owner.cleanups === null) Owner.cleanups = [fn];else Owner.cleanups.push(fn);\n  } else {\n    console.warn(\"cleanups created without a root or parent will never be run\");\n  }\n}; // experimental : exposing node constructors and some state\n\n\nS_S.makeDataNode = function makeDataNode(value) {\n  return new DataNode(value);\n};\n\nS_S.makeComputationNode = function makeComputationNode(fn, seed) {\n  return new ComputationNode(fn, seed);\n};\n\nS_S.isFrozen = function isFrozen() {\n  return RunningClock !== null;\n};\n\nS_S.isListening = function isListening() {\n  return RunningNode !== null;\n}; // Internal implementation\n/// Graph classes and operations\n\n\nvar Clock =\n/** @class */\nfunction () {\n  function Clock() {\n    this.time = 0;\n    this.changes = new Queue(); // batched changes to data nodes\n\n    this.updates = new Queue(); // computations to update\n\n    this.disposes = new Queue(); // disposals to run after current batch of updates finishes\n  }\n\n  return Clock;\n}();\n\nvar RootClockProxy = {\n  time: function () {\n    return RootClock.time;\n  }\n};\n\nvar DataNode =\n/** @class */\nfunction () {\n  function DataNode(value) {\n    this.value = value;\n    this.pending = NOTPENDING;\n    this.log = null;\n  }\n\n  DataNode.prototype.current = function () {\n    if (RunningNode !== null) {\n      logDataRead(this, RunningNode);\n    }\n\n    return this.value;\n  };\n\n  DataNode.prototype.next = function (value) {\n    if (RunningClock !== null) {\n      if (this.pending !== NOTPENDING) {\n        // value has already been set once, check for conflicts\n        if (value !== this.pending) {\n          throw new Error(\"conflicting changes: \" + value + \" !== \" + this.pending);\n        }\n      } else {\n        // add to list of changes\n        this.pending = value;\n        RootClock.changes.add(this);\n      }\n    } else {\n      // not batching, respond to change now\n      if (this.log !== null) {\n        this.pending = value;\n        RootClock.changes.add(this);\n        S_event();\n      } else {\n        this.value = value;\n      }\n    }\n\n    return value;\n  };\n\n  DataNode.prototype.clock = function () {\n    return RootClockProxy;\n  };\n\n  return DataNode;\n}();\n\nvar ComputationNode =\n/** @class */\nfunction () {\n  function ComputationNode(fn, value) {\n    this.state = CURRENT;\n    this.source1 = null;\n    this.source1slot = 0;\n    this.sources = null;\n    this.sourceslots = null;\n    this.log = null;\n    this.owned = null;\n    this.cleanups = null;\n    this.fn = fn;\n    this.value = value;\n    this.age = RootClock.time;\n    if (fn === null) return;\n    var owner = Owner,\n        running = RunningNode;\n    if (owner === null) console.warn(\"computations created without a root or parent will never be disposed\");\n    Owner = RunningNode = this;\n\n    if (RunningClock === null) {\n      toplevelComputation(this);\n    } else {\n      this.value = this.fn(this.value);\n    }\n\n    if (owner && owner !== UNOWNED) {\n      if (owner.owned === null) owner.owned = [this];else owner.owned.push(this);\n    }\n\n    Owner = owner;\n    RunningNode = running;\n  }\n\n  ComputationNode.prototype.current = function () {\n    if (RunningNode !== null) {\n      if (this.age === RootClock.time) {\n        if (this.state === RUNNING) throw new Error(\"circular dependency\");else updateNode(this); // checks for state === STALE internally, so don't need to check here\n      }\n\n      logComputationRead(this, RunningNode);\n    }\n\n    return this.value;\n  };\n\n  ComputationNode.prototype.clock = function () {\n    return RootClockProxy;\n  };\n\n  return ComputationNode;\n}();\n\nvar Log =\n/** @class */\nfunction () {\n  function Log() {\n    this.node1 = null;\n    this.node1slot = 0;\n    this.nodes = null;\n    this.nodeslots = null;\n  }\n\n  return Log;\n}();\n\nvar Queue =\n/** @class */\nfunction () {\n  function Queue() {\n    this.items = [];\n    this.count = 0;\n  }\n\n  Queue.prototype.reset = function () {\n    this.count = 0;\n  };\n\n  Queue.prototype.add = function (item) {\n    this.items[this.count++] = item;\n  };\n\n  Queue.prototype.run = function (fn) {\n    var items = this.items;\n\n    for (var i = 0; i < this.count; i++) {\n      fn(items[i]);\n      items[i] = null;\n    }\n\n    this.count = 0;\n  };\n\n  return Queue;\n}(); // Constants\n\n\nvar NOTPENDING = {},\n    CURRENT = 0,\n    STALE = 1,\n    RUNNING = 2; // \"Globals\" used to keep track of current system state\n\nvar RootClock = new Clock(),\n    RunningClock = null,\n    // currently running clock \nRunningNode = null,\n    // currently running computation\nOwner = null,\n    // owner for new computations\nUNOWNED = new ComputationNode(null, null); // Functions\n\nfunction logRead(from, to) {\n  var fromslot,\n      toslot = to.source1 === null ? -1 : to.sources === null ? 0 : to.sources.length;\n\n  if (from.node1 === null) {\n    from.node1 = to;\n    from.node1slot = toslot;\n    fromslot = -1;\n  } else if (from.nodes === null) {\n    from.nodes = [to];\n    from.nodeslots = [toslot];\n    fromslot = 0;\n  } else {\n    fromslot = from.nodes.length;\n    from.nodes.push(to);\n    from.nodeslots.push(toslot);\n  }\n\n  if (to.source1 === null) {\n    to.source1 = from;\n    to.source1slot = fromslot;\n  } else if (to.sources === null) {\n    to.sources = [from];\n    to.sourceslots = [fromslot];\n  } else {\n    to.sources.push(from);\n    to.sourceslots.push(fromslot);\n  }\n}\n\nfunction logDataRead(data, to) {\n  if (data.log === null) data.log = new Log();\n  logRead(data.log, to);\n}\n\nfunction logComputationRead(node, to) {\n  if (node.log === null) node.log = new Log();\n  logRead(node.log, to);\n}\n\nfunction S_event() {\n  // b/c we might be under a top level S.root(), have to preserve current root\n  var owner = Owner;\n  RootClock.updates.reset();\n  RootClock.time++;\n\n  try {\n    run(RootClock);\n  } finally {\n    RunningClock = RunningNode = null;\n    Owner = owner;\n  }\n}\n\nfunction toplevelComputation(node) {\n  RunningClock = RootClock;\n  RootClock.changes.reset();\n  RootClock.updates.reset();\n\n  try {\n    node.value = node.fn(node.value);\n\n    if (RootClock.changes.count > 0 || RootClock.updates.count > 0) {\n      RootClock.time++;\n      run(RootClock);\n    }\n  } finally {\n    RunningClock = Owner = RunningNode = null;\n  }\n}\n\nfunction run(clock) {\n  var running = RunningClock,\n      count = 0;\n  RunningClock = clock;\n  clock.disposes.reset(); // for each batch ...\n\n  while (clock.changes.count !== 0 || clock.updates.count !== 0 || clock.disposes.count !== 0) {\n    if (count > 0) // don't tick on first run, or else we expire already scheduled updates\n      clock.time++;\n    clock.changes.run(applyDataChange);\n    clock.updates.run(updateNode);\n    clock.disposes.run(dispose); // if there are still changes after excessive batches, assume runaway            \n\n    if (count++ > 1e5) {\n      throw new Error(\"Runaway clock detected\");\n    }\n  }\n\n  RunningClock = running;\n}\n\nfunction applyDataChange(data) {\n  data.value = data.pending;\n  data.pending = NOTPENDING;\n  if (data.log) markComputationsStale(data.log);\n}\n\nfunction markComputationsStale(log) {\n  var node1 = log.node1,\n      nodes = log.nodes; // mark all downstream nodes stale which haven't been already\n\n  if (node1 !== null) markNodeStale(node1);\n\n  if (nodes !== null) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      markNodeStale(nodes[i]);\n    }\n  }\n}\n\nfunction markNodeStale(node) {\n  var time = RootClock.time;\n\n  if (node.age < time) {\n    node.age = time;\n    node.state = STALE;\n    RootClock.updates.add(node);\n    if (node.owned !== null) markOwnedNodesForDisposal(node.owned);\n    if (node.log !== null) markComputationsStale(node.log);\n  }\n}\n\nfunction markOwnedNodesForDisposal(owned) {\n  for (var i = 0; i < owned.length; i++) {\n    var child = owned[i];\n    child.age = RootClock.time;\n    child.state = CURRENT;\n    if (child.owned !== null) markOwnedNodesForDisposal(child.owned);\n  }\n}\n\nfunction updateNode(node) {\n  if (node.state === STALE) {\n    var owner = Owner,\n        running = RunningNode;\n    Owner = RunningNode = node;\n    node.state = RUNNING;\n    cleanup(node, false);\n    node.value = node.fn(node.value);\n    node.state = CURRENT;\n    Owner = owner;\n    RunningNode = running;\n  }\n}\n\nfunction cleanup(node, final) {\n  var source1 = node.source1,\n      sources = node.sources,\n      sourceslots = node.sourceslots,\n      cleanups = node.cleanups,\n      owned = node.owned,\n      i,\n      len;\n\n  if (cleanups !== null) {\n    for (i = 0; i < cleanups.length; i++) {\n      cleanups[i](final);\n    }\n\n    node.cleanups = null;\n  }\n\n  if (owned !== null) {\n    for (i = 0; i < owned.length; i++) {\n      dispose(owned[i]);\n    }\n\n    node.owned = null;\n  }\n\n  if (source1 !== null) {\n    cleanupSource(source1, node.source1slot);\n    node.source1 = null;\n  }\n\n  if (sources !== null) {\n    for (i = 0, len = sources.length; i < len; i++) {\n      cleanupSource(sources.pop(), sourceslots.pop());\n    }\n  }\n}\n\nfunction cleanupSource(source, slot) {\n  var nodes = source.nodes,\n      nodeslots = source.nodeslots,\n      last,\n      lastslot;\n\n  if (slot === -1) {\n    source.node1 = null;\n  } else {\n    last = nodes.pop();\n    lastslot = nodeslots.pop();\n\n    if (slot !== nodes.length) {\n      nodes[slot] = last;\n      nodeslots[slot] = lastslot;\n\n      if (lastslot === -1) {\n        last.source1slot = slot;\n      } else {\n        last.sourceslots[lastslot] = slot;\n      }\n    }\n  }\n}\n\nfunction dispose(node) {\n  node.fn = null;\n  node.log = null;\n  cleanup(node, true);\n}\n// CONCATENATED MODULE: ./node_modules/solid-js/dist/solid.js\n\n\nfunction comparer(v, k, b, isArray, path, r) {\n  let index;\n  const newPath = path.concat([k]);\n\n  if (isArray && v != null && typeof v === 'object' && k != (index = b.findIndex(i => i && (i === v || v.id != null && i.id === v.id || v._id != null && i._id === v._id)))) {\n    return r.push(newPath.concat([index > -1 ? b[index] : v]));\n  }\n\n  return r.push.apply(r, diff(v, b[k], newPath));\n}\n\nfunction clone(v) {\n  if (!isObject(v)) return v;\n  if (Array.isArray(v)) return v.slice(0);\n  return Object.assign({}, v);\n}\n\nfunction isObject(obj) {\n  let ref;\n  return obj !== null && ((ref = typeof obj) === 'object' || ref === 'function');\n}\n\nfunction diff(a, b, path = []) {\n  let i, k, l, len, v;\n  const r = [];\n\n  if (!isObject(a) || b == null) {\n    if (a !== b) {\n      r.push(path.concat([a]));\n    }\n  } else if (Array.isArray(a)) {\n    for (k = i = 0, len = a.length; i < len; k = ++i) {\n      v = a[k];\n      if ((b != null ? b[k] : void 0) !== v) comparer(v, k, b, true, path, r);\n    }\n\n    if ((b != null ? b.length : void 0) > a.length) {\n      l = a.length;\n\n      while (l < b.length) {\n        r.push(path.concat([l, void 0]));\n        l++;\n      }\n    }\n  } else {\n    for (k in a) {\n      v = a[k];\n      if ((b != null ? b[k] : void 0) !== v) comparer(v, k, b, false, path, r);\n    }\n\n    for (k in b) {\n      v = b[k];\n      if (!(k in a)) r.push(path.concat([k, void 0]));\n    }\n  }\n\n  return r;\n}\n\nfunction unwrap(item) {\n  let result, unwrapped, v;\n  if (result = item != null ? item._state : void 0) return result;\n  if (!isObject(item) || typeof item === 'function' || item instanceof Element) return item;\n  if (Object.isFrozen(item)) item = clone(item);\n\n  if (Array.isArray(item)) {\n    for (let i = 0, l = item.length; i < l; i++) {\n      v = item[i];\n      if ((unwrapped = unwrap(v)) !== v) item[i] = unwrapped;\n    }\n  } else {\n    let keys = Object.keys(item);\n\n    for (let i = 0, l = keys.length; i < l; i++) {\n      v = item[keys[i]];\n      if ((unwrapped = unwrap(v)) !== v) item[keys[i]] = unwrapped;\n    }\n  }\n\n  return item;\n} // export observable\n\n\nfunction observable(input) {\n  if (Symbol.observable in input) return input[Symbol.observable]();\n  return {\n    subscribe(observer) {\n      if (!(observer instanceof Object) || observer == null) {\n        throw new TypeError('Expected the observer to be an object.');\n      }\n\n      observer = observer.next || observer;\n      let complete = false;\n      S.on(input, function next() {\n        if (complete) return;\n        observer(input());\n      });\n      return {\n        unsubscribe() {\n          complete = true;\n        }\n\n      };\n    },\n\n    [Symbol.observable]() {\n      return this;\n    }\n\n  };\n}\n\nconst SNODE = Symbol('solid-node'),\n      SPROXY = Symbol('solid-proxy');\nconst proxyTraps = {\n  get(target, property) {\n    if (property === '_state') return target;\n    const value = target[property];\n    if (es_S.isListening() && typeof value !== 'function') track(target, property, value);\n    return !isObject(value) || typeof value === 'function' || value instanceof Element ? value : wrap(value);\n  },\n\n  set() {\n    return true;\n  },\n\n  deleteProperty() {\n    return true;\n  }\n\n};\n\nfunction wrap(value) {\n  return value[SPROXY] || (value[SPROXY] = new Proxy(value, proxyTraps));\n}\n\nfunction getDataNode(target) {\n  let node = target[SNODE];\n  if (!node) target[SNODE] = node = {};\n  return node;\n}\n\nfunction track(target, property, value) {\n  let node;\n\n  if (isObject(value) && !(value instanceof Element)) {\n    if (node = getDataNode(value)) {\n      if (!node._self) node._self = es_S.makeDataNode();\n\n      node._self.current();\n    }\n  }\n\n  node = getDataNode(target);\n  node[property] || (node[property] = es_S.makeDataNode());\n  node[property].current();\n}\n\nfunction trigger(node, property, notify) {\n  if (node[property]) node[property].next();\n  if (notify && node._self) node._self.next();\n}\n\nfunction setProperty(state, property, value) {\n  value = unwrap(value);\n  if (state[property] === value) return;\n  const notify = Array.isArray(state) || !(property in state);\n\n  if (value === void 0) {\n    delete state[property];\n    if (Array.isArray(state)) state.length -= 1;\n  } else state[property] = value;\n\n  trigger(getDataNode(state), property, notify);\n}\n\nfunction mergeState(state, value) {\n  const keys = Object.keys(value) || [];\n\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n    setProperty(state, key, value[key]);\n  }\n}\n\nfunction updatePath(current, path, traversed = []) {\n  if (path.length === 1) {\n    let value = path[0];\n\n    if (typeof value === 'function') {\n      value = value(wrap(current), traversed); // deep map\n\n      if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; i += 1) updatePath(current, value[i], traversed);\n\n        return;\n      }\n    }\n\n    return mergeState(current, value);\n  }\n\n  const part = path.shift(),\n        partType = typeof part,\n        isArray = Array.isArray(current);\n\n  if (Array.isArray(part)) {\n    // Ex. update('data', [2, 23], 'label', l => l + ' !!!');\n    for (let i = 0; i < part.length; i++) updatePath(current, [part[i]].concat(path), [].concat(traversed, [part[i]]));\n  } else if (isArray && partType === 'function') {\n    // Ex. update('data', i => i.id === 42, 'label', l => l + ' !!!');\n    for (let i = 0; i < current.length; i++) if (part(current[i], i)) updatePath(current[i], path.slice(0), [].concat(traversed, [i]));\n  } else if (isArray && partType === 'object') {\n    // Ex. update('data', { from: 3, to: 12, by: 2 }, 'label', l => l + ' !!!');\n    const {\n      from = 0,\n      to = current.length - 1,\n      by = 1\n    } = part;\n\n    for (let i = from; i <= to; i += by) updatePath(current[i], path.slice(0), [].concat(traversed, [i]));\n  } else if (isArray && part === '*') {\n    // Ex. update('data', '*', 'label', l => l + ' !!!');\n    for (let i = 0; i < current.length; i++) updatePath(current, [i].concat(path), [].concat(traversed, [i]));\n  } else if (path.length === 1) {\n    let value = path[0];\n    if (typeof value === 'function') value = value(typeof current[part] === 'object' ? wrap(current[part]) : current[part], traversed.concat([part]));\n    if (current[part] != null && typeof current[part] === 'object' && value !== null && typeof value === 'object' && !Array.isArray(value)) return mergeState(current[part], value);\n    return setProperty(current, part, value);\n  } else updatePath(current[part], path);\n}\n\nfunction useState(state) {\n  state = unwrap(state);\n  const wrappedState = wrap(state);\n  return [wrappedState, setState];\n\n  function setState() {\n    const args = arguments;\n    es_S.freeze(() => {\n      if (Array.isArray(args[0])) {\n        for (let i = 0; i < args.length; i += 1) updatePath(state, args[i]);\n      } else updatePath(state, Array.prototype.slice.call(args));\n    });\n  }\n}\n\nfunction reconcile() {\n  const path = Array.prototype.slice.call(arguments, 0, -1),\n        value = arguments[arguments.length - 1];\n  return state => {\n    state = unwrap(state);\n\n    for (let i = 0; i < path.length; i += 1) state = state[path[i]];\n\n    return diff(value, state, path);\n  };\n}\n\nfunction useMemo(fn, seed) {\n  return es_S(fn, seed);\n}\n\nfunction useSignal(value) {\n  return es_S.data(value);\n}\n\nfunction useEffect(fn, deps, defer) {\n  if (!deps) return es_S.effect(fn);\n  es_S.on(deps, fn, undefined, defer);\n}\n\nconst {\n  root,\n  cleanup: useCleanup,\n  sample,\n  freeze\n} = es_S;\n\n// CONCATENATED MODULE: ./node_modules/babel-plugin-jsx-dom-expressions/dist/createRuntime.js\nconst GROUPING = '__recGroup',\n      FORWARD = 'nextSibling',\n      BACKWARD = 'previousSibling';\n\nfunction step(node, direction) {\n  const key = node[GROUPING];\n\n  if (key) {\n    while (node[direction] && node[direction][GROUPING] === key) node = node[direction];\n  }\n\n  return node[direction];\n} // This is almost straightforward implementation of reconcillation algorithm\n// based on ivi documentation:\n// https://github.com/localvoid/ivi/blob/2c81ead934b9128e092cc2a5ef2d3cabc73cb5dd/packages/ivi/src/vdom/implementation.ts#L1366\n// With some fast paths from Surplus implementation:\n// https://github.com/adamhaile/surplus/blob/master/src/runtime/content.ts#L86\n// And working with data directly from Stage0:\n// https://github.com/Freak613/stage0/blob/master/reconcile.js\n// This implementation is tailored for fine grained change detection and adds suupport for fragments\n\n\nfunction createRuntime_reconcile(parent, accessor, mapFn, afterRenderFn, options, beforeNode, afterNode) {\n  const {\n    wrap,\n    cleanup,\n    root,\n    sample\n  } = options;\n  let disposables = [],\n      counter = 0;\n\n  function prepNodes(node) {\n    if (node.nodeType === 11) {\n      let mark = node.firstChild;\n      counter++;\n\n      while (mark) {\n        mark[GROUPING] = counter;\n        mark = mark.nextSibling;\n      }\n    }\n\n    return node;\n  }\n\n  function createFn(item, i) {\n    return root(disposer => (disposables[i] = disposer, prepNodes(mapFn(item, i))));\n  }\n\n  function afterRender() {\n    afterRenderFn && afterRenderFn(beforeNode ? beforeNode.nextSibling : parent.firstChild, afterNode);\n  }\n\n  cleanup(function dispose() {\n    for (let i = 0; i < disposables.length; i++) disposables[i]();\n  });\n  wrap((renderedValues = []) => {\n    const data = accessor();\n    parent = beforeNode && beforeNode.parentNode || parent;\n    return sample(() => {\n      // Fast path for clear\n      const length = data.length;\n\n      if (length === 0) {\n        if (beforeNode !== undefined || afterNode !== undefined) {\n          let node = beforeNode !== undefined ? beforeNode.nextSibling : parent.firstChild,\n              newAfterNode = afterNode,\n              tmp;\n          if (newAfterNode === undefined) newAfterNode = null;\n\n          while (node !== newAfterNode) {\n            tmp = node.nextSibling;\n            parent.removeChild(node);\n            node = tmp;\n          }\n        } else parent.textContent = \"\";\n\n        for (let i = 0; i < renderedValues.length; i++) disposables[i]();\n\n        disposables = [];\n        afterRender();\n        return [];\n      } // Fast path for create\n\n\n      if (renderedValues.length === 0) {\n        let node,\n            mode = afterNode !== undefined,\n            nextData = new Array(length);\n\n        for (let i = 0; i < length; i++) {\n          node = createFn(nextData[i] = data[i], i);\n          mode ? parent.insertBefore(node, afterNode) : parent.appendChild(node);\n        }\n\n        afterRender();\n        return nextData;\n      }\n\n      let prevStart = 0,\n          newStart = 0,\n          loop = true,\n          prevEnd = renderedValues.length - 1,\n          newEnd = length - 1,\n          a,\n          b,\n          prevStartNode = beforeNode ? beforeNode.nextSibling : parent.firstChild,\n          newStartNode = prevStartNode,\n          prevEndNode = afterNode ? afterNode.previousSibling : parent.lastChild,\n          newAfterNode = afterNode;\n\n      fixes: while (loop) {\n        loop = false;\n\n        let _node; // Skip prefix\n\n\n        a = renderedValues[prevStart], b = data[newStart];\n\n        while (a === b) {\n          disposables[newStart] = disposables[prevStart];\n          prevStart++;\n          newStart++;\n          newStartNode = prevStartNode = step(prevStartNode, FORWARD);\n          if (prevEnd < prevStart || newEnd < newStart) break fixes;\n          a = renderedValues[prevStart];\n          b = data[newStart];\n        } // Skip suffix\n\n\n        a = renderedValues[prevEnd], b = data[newEnd];\n\n        while (a === b) {\n          disposables[newEnd] = disposables[prevEnd];\n          prevEnd--;\n          newEnd--;\n          newAfterNode = prevEndNode;\n          prevEndNode = step(prevEndNode, BACKWARD);\n          if (prevEnd < prevStart || newEnd < newStart) break fixes;\n          a = renderedValues[prevEnd];\n          b = data[newEnd];\n        } // Fast path to swap backward\n\n\n        a = renderedValues[prevEnd], b = data[newStart];\n\n        while (a === b) {\n          loop = true;\n          _node = step(prevEndNode, BACKWARD);\n          let mark = _node.nextSibling;\n\n          if (newStartNode !== mark) {\n            while (mark !== prevEndNode) {\n              let tmp = mark.nextSibling;\n              parent.insertBefore(mark, newStartNode);\n              mark = tmp;\n            }\n\n            parent.insertBefore(mark, newStartNode);\n            prevEndNode = _node;\n            disposables.splice(newStart, 0, disposables.splice(prevEnd, 1)[0]);\n          }\n\n          newStart++;\n          prevEnd--;\n          if (prevEnd < prevStart || newEnd < newStart) break fixes;\n          a = renderedValues[prevEnd];\n          b = data[newStart];\n        } // Fast path to swap forward\n\n\n        a = renderedValues[prevStart], b = data[newEnd];\n\n        while (a === b) {\n          loop = true;\n          _node = step(prevStartNode, FORWARD);\n          let mark = prevStartNode,\n              tmp;\n\n          if (mark !== newAfterNode) {\n            while (mark.nextSibling !== _node) {\n              tmp = mark.nextSibling;\n              parent.insertBefore(mark, newAfterNode);\n              mark = tmp;\n            }\n\n            parent.insertBefore(mark, newAfterNode);\n            disposables.splice(newEnd, 0, disposables.splice(prevStart, 1)[0]);\n            newAfterNode = mark;\n            prevStartNode = _node;\n          }\n\n          prevStart++;\n          newEnd--;\n          if (prevEnd < prevStart || newEnd < newStart) break fixes;\n          a = renderedValues[prevStart];\n          b = data[newEnd];\n        }\n      } // Fast path for shrink\n\n\n      if (newEnd < newStart) {\n        if (prevStart <= prevEnd) {\n          let next, mark, tmp;\n\n          while (prevStart <= prevEnd) {\n            next = step(prevEndNode, BACKWARD);\n            mark = prevEndNode;\n\n            while (mark !== next) {\n              tmp = mark.previousSibling;\n              parent.removeChild(mark);\n              mark = tmp;\n            }\n\n            prevEndNode = next;\n            disposables[prevEnd]();\n            prevEnd--;\n          }\n        }\n\n        disposables.length = length;\n        afterRender();\n        return data.slice(0);\n      } // Fast path for add\n\n\n      if (prevEnd < prevStart) {\n        if (newStart <= newEnd) {\n          let node,\n              mode = newAfterNode ? 1 : 0;\n\n          while (newStart <= newEnd) {\n            node = createFn(data[newStart], newStart);\n            mode ? parent.insertBefore(node, newAfterNode) : parent.appendChild(node);\n            newStart++;\n          }\n        }\n\n        afterRender();\n        return data.slice(0);\n      } // Positions for reusing nodes from current DOM state\n\n\n      const P = new Array(newEnd + 1 - newStart);\n\n      for (let i = newStart; i <= newEnd; i++) P[i] = -1; // Index to resolve position from current to new\n\n\n      const I = new Map();\n\n      for (let i = newStart; i <= newEnd; i++) I.set(data[i], i);\n\n      let reusingNodes = 0,\n          toRemove = [];\n\n      for (let i = prevStart; i <= prevEnd; i++) {\n        if (I.has(renderedValues[i])) {\n          P[I.get(renderedValues[i])] = i;\n          reusingNodes++;\n        } else {\n          toRemove.push(i);\n        }\n      } // Fast path for full replace\n\n\n      if (reusingNodes === 0) {\n        if (prevStartNode !== parent.firstChild || prevEndNode !== parent.lastChild) {\n          let node = prevStartNode,\n              tmp,\n              mark;\n          newAfterNode = prevEndNode.nextSibling;\n\n          while (node !== newAfterNode) {\n            mark = step(node, FORWARD);\n\n            while (node !== mark) {\n              tmp = node.nextSibling;\n              parent.removeChild(node);\n              node = tmp;\n            }\n\n            disposables[prevStart]();\n            prevStart++;\n          }\n        } else {\n          while (prevStart <= prevEnd) {\n            disposables[prevStart]();\n            prevStart++;\n          }\n\n          parent.textContent = \"\";\n        }\n\n        let node,\n            mode = newAfterNode ? 1 : 0;\n\n        for (let i = newStart; i <= newEnd; i++) {\n          node = createFn(data[i], i);\n          mode ? parent.insertBefore(node, newAfterNode) : parent.appendChild(node);\n        }\n\n        afterRender();\n        return data.slice(0);\n      } // What else?\n\n\n      const longestSeq = longestPositiveIncreasingSubsequence(P, newStart); // Collect nodes to work with them\n\n      const nodes = [];\n      let tmpC = prevStartNode;\n\n      for (let i = prevStart; i <= prevEnd; i++) {\n        nodes[i] = tmpC;\n        tmpC = step(tmpC, FORWARD);\n      }\n\n      for (let i = 0; i < toRemove.length; i++) {\n        const index = toRemove[i];\n        let node = nodes[index],\n            end = step(node, FORWARD),\n            tmp;\n\n        while (node !== end) {\n          tmp = node.nextSibling;\n          parent.removeChild(node);\n          node = tmp;\n        }\n\n        disposables[index]();\n      }\n\n      const oldDisposables = disposables.slice(0);\n      let lisIdx = longestSeq.length - 1,\n          tmpD;\n\n      for (let i = newEnd; i >= newStart; i--) {\n        if (longestSeq[lisIdx] === i) {\n          newAfterNode = nodes[P[longestSeq[lisIdx]]];\n          disposables[i] = oldDisposables[P[i]];\n          lisIdx--;\n        } else {\n          if (P[i] === -1) {\n            tmpD = createFn(data[i], i);\n            parent.insertBefore(tmpD, newAfterNode);\n          } else {\n            disposables[i] = oldDisposables[P[i]];\n            tmpD = nodes[P[i]];\n            let mark = tmpD,\n                end = step(mark, FORWARD),\n                tmp;\n\n            while (mark !== end) {\n              tmp = mark.nextSibling;\n              parent.insertBefore(mark, newAfterNode);\n              mark = tmp;\n            }\n          }\n\n          newAfterNode = tmpD;\n        }\n      }\n\n      disposables.length = length;\n      afterRender();\n      return data.slice(0);\n    });\n  });\n} // Picked from\n// https://github.com/adamhaile/surplus/blob/master/src/runtime/content.ts#L368\n// return an array of the indices of ns that comprise the longest increasing subsequence within ns\n\n\nfunction longestPositiveIncreasingSubsequence(ns, newStart) {\n  var seq = [],\n      is = [],\n      l = -1,\n      pre = new Array(ns.length);\n\n  for (var i = newStart, len = ns.length; i < len; i++) {\n    var n = ns[i];\n    if (n < 0) continue;\n    var j = findGreatestIndexLEQ(seq, n);\n    if (j !== -1) pre[i] = is[j];\n\n    if (j === l) {\n      l++;\n      seq[l] = n;\n      is[l] = i;\n    } else if (n < seq[j + 1]) {\n      seq[j + 1] = n;\n      is[j + 1] = i;\n    }\n  }\n\n  for (i = is[l]; l >= 0; i = pre[i], l--) {\n    seq[l] = i;\n  }\n\n  return seq;\n}\n\nfunction findGreatestIndexLEQ(seq, n) {\n  // invariant: lo is guaranteed to be index of a value <= n, hi to be >\n  // therefore, they actually start out of range: (-1, last + 1)\n  var lo = -1,\n      hi = seq.length; // fast path for simple increasing sequences\n\n  if (hi > 0 && seq[hi - 1] <= n) return hi - 1;\n\n  while (hi - lo > 1) {\n    var mid = Math.floor((lo + hi) / 2);\n\n    if (seq[mid] > n) {\n      hi = mid;\n    } else {\n      lo = mid;\n    }\n  }\n\n  return lo;\n}\n\nconst Types = {\n  ATTRIBUTE: 'attribute',\n  PROPERTY: 'property'\n};\nvar Attributes = {\n  href: {\n    type: Types.ATTRIBUTE\n  },\n  style: {\n    type: Types.PROPERTY,\n    alias: 'style.cssText'\n  },\n  for: {\n    type: Types.PROPERTY,\n    alias: 'htmlFor'\n  },\n  class: {\n    type: Types.PROPERTY,\n    alias: 'className'\n  },\n  // React compat\n  spellCheck: {\n    type: Types.PROPERTY,\n    alias: 'spellcheck'\n  },\n  allowFullScreen: {\n    type: Types.PROPERTY,\n    alias: 'allowFullscreen'\n  },\n  autoCapitalize: {\n    type: Types.PROPERTY,\n    alias: 'autocapitalize'\n  },\n  autoFocus: {\n    type: Types.PROPERTY,\n    alias: 'autofocus'\n  },\n  autoPlay: {\n    type: Types.PROPERTY,\n    alias: 'autoplay'\n  }\n};\n\nfunction normalizeIncomingArray(normalized, array) {\n  for (var i = 0, len = array.length; i < len; i++) {\n    var item = array[i];\n\n    if (item instanceof Node) {\n      normalized.push(item);\n    } else if (item == null || item === true || item === false) ;else if (Array.isArray(item)) {\n      normalizeIncomingArray(normalized, item);\n    } else if (typeof item === 'string') {\n      normalized.push(item);\n    } else {\n      normalized.push(item.toString());\n    }\n  }\n\n  return normalized;\n}\n\nfunction clearAll(parent, current, marker) {\n  if (!marker) return parent.textContent = '';\n\n  if (Array.isArray(current)) {\n    for (let i = 0; i < current.length; i++) {\n      parent.removeChild(current[i]);\n    }\n  } else if (current != null && current != '') parent.removeChild(marker.previousSibling);\n\n  return '';\n}\n\nfunction model(el) {\n  let m = el.model,\n      a = el.action,\n      r;\n  if (!m && el.parentNode) r = model(el.parentNode);\n  return [m || r && r[0], a || r && r[1]];\n}\n\nfunction createRuntime(options) {\n  const {\n    wrap,\n    cleanup,\n    root\n  } = options;\n\n  function insertExpression(parent, value, current, marker) {\n    if (value === current) return current;\n    parent = marker && marker.parentNode || parent;\n    const t = typeof value;\n\n    if (t === 'string' || t === 'number') {\n      if (t === 'number') value = value.toString();\n\n      if (marker) {\n        if (current !== '' && typeof current === 'string') {\n          current = marker.previousSibling.data = value;\n        } else {\n          const node = document.createTextNode(value);\n\n          if (current !== '' && current != null) {\n            parent.replaceChild(node, marker.previousSibling);\n          } else parent.insertBefore(node, marker);\n\n          current = value;\n        }\n      } else {\n        if (current !== '' && typeof current === 'string') {\n          current = parent.firstChild.data = value;\n        } else current = parent.textContent = value;\n      }\n    } else if (value == null || value === '' || t === 'boolean') {\n      current = clearAll(parent, current, marker);\n    } else if (t === 'function') {\n      wrap(function () {\n        current = insertExpression(parent, value(), current, marker);\n      });\n    } else if (value instanceof Node) {\n      if (Array.isArray(current)) {\n        if (current.length === 0) {\n          parent.insertBefore(value, marker);\n        } else if (current.length === 1) {\n          parent.replaceChild(value, current[0]);\n        } else {\n          clearAll(parent, current, marker);\n          parent.appendChild(value);\n        }\n      } else if (current == null || current === '') {\n        parent.insertBefore(value, marker);\n      } else {\n        parent.replaceChild(value, marker && marker.previousSibling || parent.firstChild);\n      }\n\n      current = value;\n    } else if (Array.isArray(value)) {\n      let array = normalizeIncomingArray([], value);\n      clearAll(parent, current, marker);\n\n      if (array.length !== 0) {\n        for (let i = 0, len = array.length; i < len; i++) {\n          let node = array[i];\n          if (!(node instanceof Node)) node = array[i] = document.createTextNode(node);\n          parent.insertBefore(node, marker);\n        }\n      }\n\n      current = array;\n    } else {\n      throw new Error(\"content must be Node, stringable, or array of same\");\n    }\n\n    return current;\n  }\n\n  return Object.assign({\n    insert(parent, accessor, init, marker) {\n      if (typeof accessor !== 'function') return insertExpression(parent, accessor, init, marker);\n      wrap((current = init) => insertExpression(parent, accessor(), current, marker));\n    },\n\n    addEventListener(node, eventName, handler) {\n      node.addEventListener(eventName, e => {\n        if (handler.length < 2) return handler(e);\n        const a = model(e.target);\n        handler(e, a[0], a[1]);\n      });\n    },\n\n    spread(node, accessor) {\n      wrap(function () {\n        const props = accessor();\n        let info;\n\n        for (const prop in props) {\n          const value = props[prop];\n\n          if (prop === 'style') {\n            Object.assign(node.style, value);\n          } else if (prop === 'classList') {\n            for (const className in value) node.classList.toggle(className, value[className]);\n          } else if (info = Attributes[prop]) {\n            if (info.type === 'attribute') {\n              node.setAttribute(prop, value);\n            } else node[info.alias] = value;\n          } else node[prop] = value;\n        }\n      });\n    },\n\n    flow(parent, type, accessor, expr, afterRender, marker) {\n      if (type === 'each') {\n        let startNode;\n        if (marker) startNode = marker.previousSibling;\n        createRuntime_reconcile(parent, accessor, expr, afterRender, options, startNode, marker);\n      } else if (type === 'when') {\n        let current, disposable;\n        cleanup(function dispose() {\n          disposable && disposable();\n        });\n        wrap(cached => {\n          const value = accessor();\n          if (value === cached) return cached;\n          disposable && disposable();\n\n          if (value == null || value === false) {\n            clearAll(parent, cached, marker);\n            return value;\n          }\n\n          root(disposer => {\n            disposable = disposer;\n            current = insertExpression(parent, expr(value), current, marker);\n            afterRender && afterRender(current, marker);\n          });\n          return value;\n        });\n      }\n    }\n\n  }, options);\n}\n\n\n// CONCATENATED MODULE: ./node_modules/solid-js/dist/dom.js\n\n\n\nfunction createHandler(className) {\n  return (e, s) => e.classList.toggle(className, s);\n}\n\nfunction shallowDiff(a, b) {\n  let sa = new Set(a),\n      sb = new Set(b);\n  return [a.filter(i => !sb.has(i)), b.filter(i => !sa.has(i))];\n}\n\nconst r = createRuntime({\n  wrap: es_S.makeComputationNode,\n  root: es_S.root,\n  cleanup: es_S.cleanup,\n  sample: es_S.sample\n});\n\nfunction selectWhen(signal, handler) {\n  if (typeof handler === 'string') handler = createHandler(handler);\n  let start, end;\n  es_S.makeComputationNode(element => {\n    const model = signal();\n    if (element) handler(element, false);\n    let marker = start;\n\n    while (marker && marker !== end) {\n      if (marker.model === model) {\n        handler(marker, true);\n        return marker;\n      }\n\n      marker = marker.nextSibling;\n    }\n  });\n  return (s, e) => (start = s, end = e);\n}\n\nfunction selectEach(signal, handler) {\n  if (typeof handler === 'string') handler = createHandler(handler);\n  let start, end;\n  es_S.makeComputationNode(elements => {\n    const models = signal(),\n          newElements = [];\n    let marker = start;\n\n    while (marker && marker !== end) {\n      if (models.indexOf(marker.model) > -1) newElements.push(marker);\n      marker = marker.nextSibling;\n    }\n\n    const [additions, removals] = shallowDiff(newElements, elements);\n    additions.forEach(el => handler(el, true));\n    removals.forEach(el => handler(el, false));\n    return newElements;\n  });\n  return (s, e) => (start = s, end = e);\n}\n\n\n// CONCATENATED MODULE: ./src/App.jsx\nconst _tmpl$7 = document.createElement(\"template\");\n\n_tmpl$7.innerHTML = \"<button class='clear-completed'>Clear completed</button>\";\n\nconst _tmpl$6 = document.createElement(\"template\");\n\n_tmpl$6.innerHTML = \"<footer class='footer'><span class='todo-count'><strong></strong> left\\n    </span><ul class='filters'><li><a href='#/'>All</a></li><span></span><li><a href='#/active'>Active</a></li><span></span><li><a href='#/completed'>Completed</a></li></ul></footer>\";\n\nconst _tmpl$5 = document.createElement(\"template\");\n\n_tmpl$5.innerHTML = \"<input class='edit'/>\";\n\nconst _tmpl$4 = document.createElement(\"template\");\n\n_tmpl$4.innerHTML = \"<li class='todo'><div class='view'><input class='toggle' type='checkbox'/><label></label><button class='destroy'></button></div></li>\";\n\nconst _tmpl$3 = document.createElement(\"template\");\n\n_tmpl$3.innerHTML = \"<section class='main'><input id='toggle-all' class='toggle-all' type='checkbox'/><label for='toggle-all'></label><ul class='todo-list'></ul></section>\";\n\nconst _tmpl$2 = document.createElement(\"template\");\n\n_tmpl$2.innerHTML = \"<header class='header'><h1>todos</h1><input class='new-todo' placeholder='What needs to be done?'/></header>\";\n\nconst _tmpl$ = document.createElement(\"template\");\n\n_tmpl$.innerHTML = \"<section class='todoapp'></section>\";\n\n\nconst ESCAPE_KEY = 27,\n      ENTER_KEY = 13;\n\nconst TodoApp = props => function () {\n  const _el$ = _tmpl$.content.firstChild.cloneNode(true),\n        _el$2 = _el$.insertBefore(document.createTextNode(\"\"), _el$.firstChild),\n        _el$3 = _el$.insertBefore(document.createTextNode(\"\"), _el$2.nextSibling),\n        _el$4 = _el$.insertBefore(document.createTextNode(\"\"), _el$3.nextSibling);\n\n  r.insert(_el$, TodoHeader(props), null, _el$2);\n  r.flow(_el$, \"when\", () => props.state.todos.length > 0, () => TodoList(props), null, _el$3);\n  r.flow(_el$, \"when\", () => props.state.todos.length > 0, () => TodoFooter(props), null, _el$4);\n  return _el$;\n}();\n\nconst TodoHeader = ({\n  addTodo\n}) => function () {\n  const _el$5 = _tmpl$2.content.firstChild.cloneNode(true),\n        _el$6 = _el$5.firstChild,\n        _el$7 = _el$6.nextSibling;\n\n  r.addEventListener(_el$7, \"keyup\", ({\n    target,\n    keyCode\n  }) => {\n    let title;\n    if (!(keyCode === ENTER_KEY && (title = target.value.trim()))) return;\n    addTodo({\n      title\n    });\n    target.value = '';\n  });\n  return _el$5;\n}();\n\nconst TodoList = props => {\n  const {\n    state,\n    toggleAll\n  } = props;\n\n  function filterList(todos) {\n    if (state.showMode === 'active') return todos.filter(todo => !todo.completed);else if (state.showMode === 'completed') return todos.filter(todo => todo.completed);else return todos;\n  }\n\n  return function () {\n    const _el$8 = _tmpl$3.content.firstChild.cloneNode(true),\n          _el$9 = _el$8.firstChild,\n          _el$10 = _el$9.nextSibling,\n          _el$11 = _el$10.nextSibling;\n\n    r.addEventListener(_el$9, \"change\", ({\n      target: {\n        checked\n      }\n    }) => toggleAll(checked));\n    r.wrap(() => _el$9.checked = !state.remainingCount);\n    r.flow(_el$11, \"each\", () => filterList(state.todos), todo => TodoItem(Object.assign(props, {\n      todo: todo\n    })), null);\n    return _el$8;\n  }();\n};\n\nconst TodoItem = ({\n  state,\n  editTodo,\n  removeTodo,\n  setCurrent,\n  todo\n}) => {\n  function onSave({\n    target: {\n      value\n    }\n  }) {\n    let title;\n    if (!(state.edittingTodoId === todo.id && (title = value.trim()))) return;\n    editTodo({\n      id: todo.id,\n      title\n    });\n    setCurrent();\n  }\n\n  return function () {\n    const _el$12 = _tmpl$4.content.firstChild.cloneNode(true),\n          _el$13 = _el$12.firstChild,\n          _el$14 = _el$13.firstChild,\n          _el$15 = _el$14.nextSibling,\n          _el$16 = _el$15.nextSibling,\n          _el$17 = _el$12.insertBefore(document.createTextNode(\"\"), _el$13.nextSibling);\n\n    r.wrap(() => {\n      let classNames = {\n        completed: todo.completed,\n        editing: todo.id === state.edittingTodoId\n      };\n      let classKeys = Object.keys(classNames);\n\n      for (let i = 0; i < classKeys.length; i++) _el$12.classList.toggle(classKeys[i], classNames[classKeys[i]]);\n    });\n    r.addEventListener(_el$14, \"change\", ({\n      target: {\n        checked\n      }\n    }) => editTodo({\n      id: todo.id,\n      completed: checked\n    }));\n    r.wrap(() => _el$14.checked = todo.completed);\n    r.addEventListener(_el$15, \"dblclick\", () => setCurrent(todo.id));\n    r.insert(_el$15, () => todo.title);\n    r.addEventListener(_el$16, \"click\", () => removeTodo(todo.id));\n    r.insert(_el$12, () => todo.id === state.edittingTodoId && function () {\n      const _el$18 = _tmpl$5.content.firstChild.cloneNode(true);\n\n      r.addEventListener(_el$18, \"keyup\", e => {\n        if (e.keyCode === ENTER_KEY) onSave(e);else if (e.keyCode === ESCAPE_KEY) setCurrent();\n      });\n      r.addEventListener(_el$18, \"blur\", onSave);\n      _el$18.value = todo.title;\n      return _el$18;\n    }(), null, _el$17);\n    return _el$12;\n  }();\n};\n\nconst TodoFooter = ({\n  state,\n  clearCompleted\n}) => function () {\n  const _el$19 = _tmpl$6.content.firstChild.cloneNode(true),\n        _el$20 = _el$19.firstChild,\n        _el$21 = _el$20.firstChild,\n        _el$22 = _el$20.insertBefore(document.createTextNode(\"\"), _el$21.nextSibling),\n        _el$23 = _el$20.nextSibling,\n        _el$24 = _el$23.firstChild,\n        _el$25 = _el$24.firstChild,\n        _el$26 = _el$24.nextSibling,\n        _el$27 = _el$26.nextSibling,\n        _el$28 = _el$27.firstChild,\n        _el$29 = _el$27.nextSibling,\n        _el$30 = _el$29.nextSibling,\n        _el$31 = _el$30.firstChild,\n        _el$32 = _el$19.insertBefore(document.createTextNode(\"\"), _el$23.nextSibling);\n\n  r.insert(_el$21, () => state.remainingCount);\n  r.insert(_el$20, () => state.remainingCount === 1 ? ' item' : ' items', null, _el$22);\n  r.wrap(() => {\n    let classNames = {\n      selected: state.showMode === 'all'\n    };\n    let classKeys = Object.keys(classNames);\n\n    for (let i = 0; i < classKeys.length; i++) _el$25.classList.toggle(classKeys[i], classNames[classKeys[i]]);\n  });\n  r.wrap(() => {\n    let classNames = {\n      selected: state.showMode === 'active'\n    };\n    let classKeys = Object.keys(classNames);\n\n    for (let i = 0; i < classKeys.length; i++) _el$28.classList.toggle(classKeys[i], classNames[classKeys[i]]);\n  });\n  r.wrap(() => {\n    let classNames = {\n      selected: state.showMode === 'completed'\n    };\n    let classKeys = Object.keys(classNames);\n\n    for (let i = 0; i < classKeys.length; i++) _el$31.classList.toggle(classKeys[i], classNames[classKeys[i]]);\n  });\n  r.flow(_el$19, \"when\", () => state.completedCount > 0, () => function () {\n    const _el$33 = _tmpl$7.content.firstChild.cloneNode(true);\n\n    r.addEventListener(_el$33, \"click\", clearCompleted);\n    return _el$33;\n  }(), null, _el$32);\n  return _el$19;\n}();\n\n/* harmony default export */ var App = (TodoApp);\n// CONCATENATED MODULE: ./src/mapToProps.js\n\nconst LOCAL_STORAGE_KEY = 'todos-solid';\n\nfunction useLocal(_) {\n  // load stored todos on init\n  const stored = localStorage.getItem(LOCAL_STORAGE_KEY),\n        [state, setState] = _;\n  if (stored) setState(JSON.parse(stored)); // JSON.stringify creates deps on every iterable field\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\n  });\n  return _;\n}\n\n/* harmony default export */ var mapToProps = (() => {\n  const [state, setState] = useLocal(useState({\n    counter: 0,\n    edittingTodoId: null,\n    todos: []\n  })),\n        locationHandler = () => setState('showMode', location.hash.slice(2) || 'all');\n\n  useEffect(() => {\n    const completedCount = state.todos.filter(todo => todo.completed).length;\n    setState({\n      completedCount,\n      remainingCount: state.todos.length - completedCount\n    });\n  });\n  window.addEventListener('hashchange', locationHandler);\n  useCleanup(() => window.removeEventListener('hashchange', locationHandler));\n  return {\n    state,\n    addTodo: ({\n      title\n    }) => {\n      const id = state.counter + 1;\n      setState(['todos', t => [{\n        title,\n        id,\n        completed: false\n      }, ...t]], ['counter', id]);\n    },\n    removeTodo: todoId => setState('todos', t => t.filter(item => item.id !== todoId)),\n    editTodo: todo => {\n      const index = state.todos.findIndex(item => item.id === todo.id);\n      setState('todos', index, todo);\n    },\n    clearCompleted: () => setState('todos', t => t.filter(todo => !todo.completed)),\n    toggleAll: completed => setState('todos', todo => todo.completed !== completed, {\n      completed\n    }),\n    setCurrent: todoId => setState('edittingTodoId', todoId)\n  };\n});\n// CONCATENATED MODULE: ./src/index.js\n\n\n\nroot(() => document.body.appendChild(App(mapToProps())));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);